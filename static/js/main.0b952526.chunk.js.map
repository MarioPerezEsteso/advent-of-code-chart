{"version":3,"sources":["components/LineChart/index.js","components/DataTextArea/index.js","utils/StringToHexColor.js","utils/SortAlphabetically.js","utils/LeaderBoardJsonTransformer.js","App.js","reportWebVitals.js","index.js"],"names":["LineChart","data","options","responsive","title","display","text","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","DataTextArea","dataHandler","useState","setData","className","htmlFor","id","rows","onChange","e","target","value","JSON","parse","onPaste","clipboardData","getData","defaultValue","stringToHexColor","str","c","hash","i","length","charCodeAt","hashCode","toString","toUpperCase","substring","sortAlphabetically","property","order","sortOrder","a","b","localeCompare","leaderBoardJsonTransformer","apiJsonResponse","chartData","labels","datasets","leaderBoardMembers","Object","entries","leaderBoardByDay","forEach","userId","userData","day","problemsSolved","problemNumber","userPointsByDay","keys","sort","problems","pointsForUser","timestamp","pointsByDay","userAsRGBColor","dataset","label","fill","backgroundColor","borderColor","push","App","linearChartData","setLinearChartData","useEffect","ReactGA","initialize","process","pageview","window","location","pathname","parameter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b952526.chunk.js","sourcesContent":["import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst LineChart = ({data}) => {\n\n    const options = {\n        responsive: true,\n        title: {\n            display: true,\n            text: 'üìà Leaderboard Chart'\n        },\n        tooltips: {\n            mode: 'index',\n            intersect: false,\n        },\n        hover: {\n            mode: 'nearest',\n            intersect: true\n        },\n        scales: {\n            xAxes: [{\n                display: true,\n                scaleLabel: {\n                    display: true,\n                    labelString: 'üìÖ Day of problem'\n                }\n            }],\n            yAxes: [{\n                display: true,\n                scaleLabel: {\n                    display: true,\n                    labelString: '‚≠ê Stars'\n                }\n            }]\n        }\n    }\n\n    return (\n        <div>\n            <Line data={data} options={options} />\n        </div>\n    )\n}\n\nexport default LineChart","import React, { useState } from 'react'\n\nconst DataTextArea = ({ dataHandler }) => {\n\n    const [data, setData] = useState('{}')\n\n    const onChange = (e) => {\n        setData(e.target.value)\n        dataHandler(JSON.parse(data))\n    }\n\n    const onPaste = (e) => {\n        setData(e.clipboardData.getData('text/plain'))\n        dataHandler(JSON.parse(data))\n    }\n\n    return (\n        <div className=\"form-group\">\n            <label htmlFor=\"exampleFormControlTextarea1\">\n                Enter your leaderboard data as JSON<br />\n                Get it by appending a <code>.json</code> at the end of your leaderboard page:<br />\n                <small>https://adventofcode.com/2020/leaderboard/private/view/<code>your-leaderboard-id</code>.json</small></label>\n            <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"10\" onChange={onChange} onPaste={onPaste} defaultValue={data}></textarea>\n        </div>\n    )\n}\n\nexport default DataTextArea","/**\n * These methods are based on this StackOverflow answer: \n * @see https://stackoverflow.com/a/3426956\n */\n\nconst hashCode = str => {\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    return hash;\n}\n\nconst stringToHexColor = str => {\n    let hash = hashCode(str + '')\n\n    let c = (hash & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\n}\n\nexport default stringToHexColor","/**\n * Sort alphabetically an array of objects by some specific key.\n * \n * @param {String} property Key of the object to sort.\n * @param {String} order 'ASC' or 'DESC'.\n */\nconst sortAlphabetically = (property, order = 'ASC') => {\n    let sortOrder = order == 'ASC' ? 1 : -1;\n\n    return (a, b) => (sortOrder == -1) ?\n        b[property].localeCompare(a[property]) : a[property].localeCompare(b[property]);\n}\n\nexport default sortAlphabetically","import stringToHexColor from \"./StringToHexColor\";\nimport sortAlphabetically from \"./SortAlphabetically\";\n\nconst leaderBoardJsonTransformer = (apiJsonResponse) => {\n    let chartData = {\n        labels: [],\n        datasets: []\n    }\n\n    if (!('members' in apiJsonResponse)) {\n        return chartData;\n    }\n\n    let leaderBoardMembers = Object.entries(apiJsonResponse['members'])\n\n    if (leaderBoardMembers.length === 0) {\n        return chartData;\n    }\n\n    let leaderBoardByDay = {}\n\n    leaderBoardMembers.forEach(([userId, userData]) => {\n        Object.entries(userData['completion_day_level']).forEach(([day, problemsSolved]) => {\n            if (day === '1') {\n                // Day one is skipped in the leaderboard by Advent of Code organization\n                return;\n            }\n\n            if (!(day in leaderBoardByDay)) {\n                leaderBoardByDay[day] = {}\n                leaderBoardByDay[day]['1'] = {}\n                leaderBoardByDay[day]['2'] = {}\n            }\n\n            ['1', '2'].forEach(problemNumber => {\n                if (problemNumber in problemsSolved) {\n                    leaderBoardByDay[day][problemNumber][problemsSolved[problemNumber]['get_star_ts']] = userId;\n                }\n            })\n        })\n    })\n\n    let userPointsByDay = {};\n\n    // Initialize user points by day to zero. This way, if a user has not solved a problem of a day, it\n    // get zero points by default and it has not missing data.\n    leaderBoardMembers.forEach(([userId, userData]) => {\n        userPointsByDay[userId] = {};\n        Object.keys(leaderBoardByDay).sort().forEach(day => {\n            userPointsByDay[userId][day] = 0;\n        })\n    })\n\n    // Calculate user points by day\n    Object.entries(leaderBoardByDay).forEach(([day, problems]) => {\n        ['1', '2'].forEach(problemNumber => {\n            let pointsForUser = leaderBoardMembers.length;\n            Object.keys(problems[problemNumber]).sort().forEach(function (timestamp) {\n                let userId = problems[problemNumber][timestamp];\n\n                userPointsByDay[userId][day] += pointsForUser--;\n            })\n        })\n    })\n\n    // Build dataset\n    chartData.labels = Object.keys(leaderBoardByDay)\n\n    Object.entries(userPointsByDay).forEach(([userId, pointsByDay]) => {\n        let userAsRGBColor = stringToHexColor(apiJsonResponse['members'][userId]['name'] + userId);\n\n        let dataset = {\n            label: apiJsonResponse['members'][userId]['name'],\n            data: [],\n            fill: false,\n            backgroundColor: userAsRGBColor,\n            borderColor: userAsRGBColor\n        }\n\n        Object.keys(pointsByDay).sort().forEach(day => {\n            if (day > 2) {\n                dataset.data.push(pointsByDay[day] + dataset.data[dataset.data.length - 1]);\n            } else {\n                dataset.data.push(pointsByDay[day]);\n            }\n        })\n\n        chartData.datasets.push(dataset);\n    })\n\n    chartData.datasets = chartData.datasets.sort(sortAlphabetically('label', 'ASC'))\n\n    return chartData\n}\n\nexport default leaderBoardJsonTransformer","import { useState, useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport { LineChart, DataTextArea } from './components'\nimport leaderBoardJsonTransformer from './utils/LeaderBoardJsonTransformer'\nimport './App.css';\n\nconst App = () => {\n  const [linearChartData, setLinearChartData] = useState({})\n\n  useEffect(() => {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_ID);\n    ReactGA.pageview(window.location.pathname);\n  })\n\n  const handleData = (parameter) => {\n    setLinearChartData(leaderBoardJsonTransformer(parameter))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col-3'>\n            <DataTextArea dataHandler={handleData} />\n          </div>\n          <div className='col-9'>\n            <div className='chart'>\n              <LineChart data={linearChartData} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}